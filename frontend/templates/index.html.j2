{# Basic dark-themed "Hello World" page using Tailwind CSS #}
<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>PDF Color Inverter</title>
    <link href="https://cdn.jsdelivr.net/npm/tailwindcss@2.2.19/dist/tailwind.min.css" rel="stylesheet">
    <style>
        body {
            /* Dark mode */
            background-color: #1a202c;
            color: #f7fafc;
        }

        .ui-box {
            /* Lighter dark gray box */
            border: 1px solid #93969c;
            border-radius: 0.5rem;
            padding: 2rem;
            max-width: 50%;
            margin: auto;
            margin-top: 2rem;
        }

        .ui-box-yellow {
            border-color: #f6e05e;
        }

        .ui-box-yellow p {
            color: #f6e05e;
        }

        .ui-box-blue {
            border-color: #63b3ed;
        }

        .ui-box-blue p {
            color: #63b3ed;
        }
    </style>
</head>

<body class="px-auto min-h-screen pt-20">
    <div class="ui-box h-auto w-full mx-auto">
        <h1 class="text-4xl font-bold">PDF Color Inverter</h1>
        <form id="pdf-form" class="py-4 h-auto w-full" onsubmit="event.preventDefault(); submitForm();"
            enctype="multipart/form-data">
            {{ form.file.label(class="text-lg") }}
            {{ form.file(class="mt-4 p-2 w-full h-auto border border-gray-600 rounded") }}
            {{ form.submit(class="mt-4 bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded") }}
        </form>
    </div>
    <div id="status-box" class="ui-box ui-box-yellow h-auto w-full mx-auto" style="display: none;">
        <p id="status-box.message"></p>
    </div>
</body>
<script>

    async function submitForm() {
        // Show loading message when form is submitted
        document.getElementById('status-box.message').innerText = 'Processing...';
        document.getElementById('status-box').style.display = 'block';
        document.getElementById('status-box').classList = 'ui-box ui-box-yellow h-auto w-full mx-auto';
        // Submit request
        const url = 'http://localhost:8000/invert';
        const formData = new FormData(document.getElementById('pdf-form'));
        var fileName = "";
        var data = await fetch(url, {
            method: 'POST',
            body: formData
        })
            .then(response => {
                const contentDisposition = response.headers.get('Content-Disposition');
                console.log(contentDisposition);
                if (contentDisposition && contentDisposition.includes('attachment')) {
                    const filenameMatch = contentDisposition.match(/filename[^;=\n]*=((['"]).*?\2|[^;\n]*)/);
                    console.log(filenameMatch);
                    if (filenameMatch && filenameMatch[1]) {
                        fileName = filenameMatch[1].replace(/['"]/g, '');
                        console.log(fileName);
                    }
                }
                if (response.ok) {
                    // Show done message when download starts
                    document.getElementById('status-box.message').innerText = 'Download started!';
                    document.getElementById('status-box').style.display = 'block';
                    document.getElementById('status-box').classList = 'ui-box ui-box-blue h-auto w-full mx-auto';
                    return response.blob();
                } else {
                    throw new Error('Network response was not ok');
                }
            });
        // Download the file
        const downloadUrl = window.URL.createObjectURL(data);
        const a = document.createElement('a');
        a.style.display = 'none';
        a.href = downloadUrl;
        a.download = fileName;
        document.body.appendChild(a);
        a.click();
        window.URL.revokeObjectURL(downloadUrl);
        a.remove();
    }



</script>

</html>